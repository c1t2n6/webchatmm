"""
Simple Countdown & Notification Service
H·ªá th·ªëng ƒë∆°n gi·∫£n h√≥a v·ªõi state machine pattern
"""

import asyncio
import json
import logging
from datetime import datetime, timezone
from enum import Enum
from typing import Dict, Optional
from dataclasses import dataclass

from app.database import get_db
from app.models import Room, User
from app.websocket_manager import manager

logger = logging.getLogger(__name__)

class RoomPhase(Enum):
    IDLE = "idle"
    COUNTDOWN = "countdown" 
    NOTIFICATION = "notification"
    ENDED = "ended"

@dataclass
class RoomState:
    room_id: int
    phase: RoomPhase = RoomPhase.IDLE
    countdown_remaining: int = 0
    notification_remaining: int = 0
    user_responses: Dict[str, str] = None
    task: Optional[asyncio.Task] = None
    
    def __post_init__(self):
        if self.user_responses is None:
            self.user_responses = {}

class SimpleCountdownService:
    """Service ƒë∆°n gi·∫£n v·ªõi state machine pattern"""
    
    def __init__(self):
        self.rooms: Dict[int, RoomState] = {}
        self.COUNTDOWN_DURATION = 15
        self.NOTIFICATION_DURATION = 30
    
    async def start_countdown(self, room_id: int) -> bool:
        """B·∫Øt ƒë·∫ßu countdown cho room"""
        try:
            logger.info(f"üöÄ Starting countdown for room {room_id}")
            
            # Validate room
            if not await self._validate_room(room_id):
                logger.error(f"‚ùå Room {room_id} validation failed")
                return False
            
            # Cancel existing process
            await self._cancel_room_process(room_id)
            
            # Create new room state
            self.rooms[room_id] = RoomState(room_id=room_id)
            logger.info(f"üìù Created room state for room {room_id}")
            
            # Start countdown phase
            await self._start_countdown_phase(room_id)
            
            logger.info(f"‚úÖ Countdown started for room {room_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error starting countdown for room {room_id}: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return False
    
    async def _start_countdown_phase(self, room_id: int):
        """B·∫Øt ƒë·∫ßu phase countdown"""
        state = self.rooms[room_id]
        state.phase = RoomPhase.COUNTDOWN
        state.countdown_remaining = self.COUNTDOWN_DURATION
        
        # Send countdown start message
        await self._send_websocket_message(room_id, {
            "type": "countdown_start",
            "room_id": room_id,
            "duration": self.COUNTDOWN_DURATION
        })
        
        # Start countdown task
        state.task = asyncio.create_task(self._run_countdown(room_id))
    
    async def _run_countdown(self, room_id: int):
        """Ch·∫°y countdown timer"""
        try:
            state = self.rooms[room_id]
            
            # Countdown loop - s·ª≠a timing ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c 1 gi√¢y
            while state.countdown_remaining > 0:
                # G·ª≠i update tr∆∞·ªõc khi sleep ƒë·ªÉ frontend nh·∫≠n ƒë∆∞·ª£c ngay
                await self._send_websocket_message(room_id, {
                    "type": "countdown_update",
                    "room_id": room_id,
                    "remaining": state.countdown_remaining
                })
                
                # Sleep 1 gi√¢y ch√≠nh x√°c
                await asyncio.sleep(1)
                state.countdown_remaining -= 1
            
            # Countdown finished, start notification
            await self._start_notification_phase(room_id)
            
        except asyncio.CancelledError:
            logger.info(f"Countdown cancelled for room {room_id}")
        except Exception as e:
            logger.error(f"‚ùå Error in countdown for room {room_id}: {e}")
    
    async def _start_notification_phase(self, room_id: int):
        """B·∫Øt ƒë·∫ßu phase notification"""
        logger.info(f"üîî Starting notification phase for room {room_id}")
        
        state = self.rooms[room_id]
        state.phase = RoomPhase.NOTIFICATION
        state.notification_remaining = self.NOTIFICATION_DURATION
        
        # Get users to notify
        users_to_notify = await self._get_users_to_notify(room_id)
        logger.info(f"Users to notify for room {room_id}: {users_to_notify}")
        
        if not users_to_notify:
            logger.info(f"No users to notify for room {room_id} - all users already kept active")
            # N·∫øu kh√¥ng c√≥ user n√†o c·∫ßn notify, ki·ªÉm tra xem c·∫£ 2 ƒë√£ keep active ch∆∞a
            if await self._both_users_responded_yes(room_id):
                await self._keep_room(room_id)
            else:
                await self._end_room(room_id, "no_users_to_notify")
            return
        
        # Send notification cho T·∫§T C·∫¢ users trong room (kh√¥ng ch·ªâ nh·ªØng user c·∫ßn thi·∫øt)
        # V√¨ notification c·∫ßn hi·ªÉn th·ªã cho c·∫£ 2 ƒë·ªÉ h·ªç c√≥ th·ªÉ ph·∫£n h·ªìi
        try:
            db = next(get_db())
            try:
                room = db.query(Room).filter(Room.id == room_id).first()
                if room:
                    logger.info(f"üì§ Sending notifications to users {room.user1_id} and {room.user2_id} for room {room_id}")
                    
                    # G·ª≠i notification_show message tr∆∞·ªõc
                    logger.info(f"üì§ Sending notification_show message for room {room_id}")
                    await self._send_websocket_message(room_id, {
                        "type": "notification_show",
                        "room_id": room_id,
                        "timeout": self.NOTIFICATION_DURATION,
                        "message": "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi n√†y kh√¥ng?"
                    })
                    
                    # Sau ƒë√≥ g·ª≠i personal notifications
                    await self._send_personal_notification(room_id, room.user1_id, self.NOTIFICATION_DURATION)
                    await self._send_personal_notification(room_id, room.user2_id, self.NOTIFICATION_DURATION)
                    logger.info(f"‚úÖ Notifications sent to both users for room {room_id}")
                else:
                    logger.error(f"Room {room_id} not found for notification")
            finally:
                db.close()
        except Exception as e:
            logger.error(f"Error sending notifications for room {room_id}: {e}")
            # Fallback: g·ª≠i broadcast
            logger.info(f"üì§ Sending fallback broadcast notification for room {room_id}")
            await self._send_websocket_message(room_id, {
                "type": "notification_show",
                "room_id": room_id,
                "timeout": self.NOTIFICATION_DURATION,
                "message": "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi n√†y kh√¥ng?"
            })
        
        # Start notification timeout
        state.task = asyncio.create_task(self._run_notification_timeout(room_id))
        logger.info(f"‚è∞ Notification timeout started for room {room_id}")
    
    async def _run_notification_timeout(self, room_id: int):
        """Ch·∫°y notification timeout"""
        try:
            state = self.rooms[room_id]
            
            # Notification timeout loop - s·ª≠a timing ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c 1 gi√¢y
            while state.notification_remaining > 0:
                # G·ª≠i update tr∆∞·ªõc khi sleep ƒë·ªÉ frontend nh·∫≠n ƒë∆∞·ª£c ngay
                await self._send_websocket_message(room_id, {
                    "type": "notification_update",
                    "room_id": room_id,
                    "remaining": state.notification_remaining
                })
                
                # Sleep 1 gi√¢y ch√≠nh x√°c
                await asyncio.sleep(1)
                state.notification_remaining -= 1
            
            # Timeout reached, check responses
            await self._check_responses_and_end(room_id)
            
        except asyncio.CancelledError:
            logger.info(f"Notification timeout cancelled for room {room_id}")
        except Exception as e:
            logger.error(f"‚ùå Error in notification timeout for room {room_id}: {e}")
    
    async def handle_user_response(self, room_id: int, user_id: int, response: str) -> dict:
        """X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ user"""
        try:
            if room_id not in self.rooms:
                return {"error": "Room not found"}
            
            state = self.rooms[room_id]
            if state.phase != RoomPhase.NOTIFICATION:
                return {"error": "Not in notification phase"}
            
            # Get user key
            user_key = await self._get_user_key(room_id, user_id)
            if not user_key:
                return {"error": "User not in room"}
            
            # Update response
            state.user_responses[user_key] = response
            
            # If "no" response, end room immediately
            if response == "no":
                await self._end_room(room_id, "user_ended")
                return {"room_ended": True, "message": "Ph√≤ng chat ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c"}
            
            # If "yes" response, check if both users responded
            if response == "yes":
                if await self._both_users_responded_yes(room_id):
                    await self._keep_room(room_id)
                    return {"room_kept": True, "message": "C·∫£ 2 ƒë·ªÅu mu·ªën ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán!"}
                else:
                    return {"waiting_for_other": True, "message": "ƒêang ch·ªù ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi chat kh√°c..."}
            
            return {"error": "Invalid response"}
            
        except Exception as e:
            logger.error(f"‚ùå Error handling user response for room {room_id}: {e}")
            return {"error": str(e)}
    
    async def _check_responses_and_end(self, room_id: int):
        """Ki·ªÉm tra responses v√† k·∫øt th√∫c room n·∫øu c·∫ßn"""
        if await self._both_users_responded_yes(room_id):
            await self._keep_room(room_id)
        else:
            await self._end_room(room_id, "timeout")
    
    async def _both_users_responded_yes(self, room_id: int) -> bool:
        """Ki·ªÉm tra xem c·∫£ 2 user ƒë√£ ch·ªçn 'yes' ch∆∞a"""
        state = self.rooms[room_id]
        return (state.user_responses.get("user1") == "yes" and 
                state.user_responses.get("user2") == "yes")
    
    async def _keep_room(self, room_id: int):
        """Gi·ªØ room v√† k·∫øt th√∫c process"""
        await self._send_websocket_message(room_id, {
            "type": "room_kept",
            "room_id": room_id,
            "message": "C·∫£ 2 ƒë·ªÅu mu·ªën ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán!"
        })
        
        await self._cancel_room_process(room_id)
        logger.info(f"‚úÖ Room {room_id} kept by both users")
    
    async def _end_room(self, room_id: int, reason: str):
        """K·∫øt th√∫c room"""
        try:
            # Update database
            db = next(get_db())
            try:
                room = db.query(Room).filter(Room.id == room_id).first()
                if room:
                    room.end_time = datetime.now(timezone.utc)
                    
                    # Update user statuses
                    user1 = db.query(User).filter(User.id == room.user1_id).first()
                    user2 = db.query(User).filter(User.id == room.user2_id).first()
                    
                    if user1:
                        user1.status = 'idle'
                        user1.current_room_id = None
                    if user2:
                        user2.status = 'idle'
                        user2.current_room_id = None
                    
                    db.commit()
                    
            finally:
                db.close()
            
            # Send room ended message
            await self._send_websocket_message(room_id, {
                "type": "room_ended",
                "room_id": room_id,
                "reason": reason,
                "message": "Ph√≤ng chat ƒë√£ k·∫øt th√∫c"
            })
            
            # Cleanup
            await self._cancel_room_process(room_id)
            logger.info(f"‚úÖ Room {room_id} ended: {reason}")
            
        except Exception as e:
            logger.error(f"‚ùå Error ending room {room_id}: {e}")
    
    async def _cancel_room_process(self, room_id: int):
        """H·ªßy process c·ªßa room"""
        if room_id in self.rooms:
            state = self.rooms[room_id]
            if state.task:
                state.task.cancel()
            del self.rooms[room_id]
    
    async def _validate_room(self, room_id: int) -> bool:
        """Validate room t·ªìn t·∫°i v√† ch∆∞a k·∫øt th√∫c"""
        try:
            db = next(get_db())
            try:
                room = db.query(Room).filter(Room.id == room_id).first()
                return room and not room.end_time
            finally:
                db.close()
        except Exception as e:
            logger.error(f"Error validating room {room_id}: {e}")
            return False
    
    async def _get_users_to_notify(self, room_id: int) -> list:
        """L·∫•y danh s√°ch users c·∫ßn notify (ch·ªâ nh·ªØng user ch∆∞a gi·ªØ cu·ªôc tr√≤ chuy·ªán)"""
        try:
            db = next(get_db())
            try:
                room = db.query(Room).filter(Room.id == room_id).first()
                if not room:
                    logger.error(f"Room {room_id} not found")
                    return []
                
                # Get keep_active_responses
                keep_active_responses = json.loads(room.keep_active_responses) if room.keep_active_responses else {}
                users_to_notify = []
                
                logger.info(f"Room {room_id} keep_active_responses: {keep_active_responses}")
                
                # Check user1 - ch·ªâ notify n·∫øu ch∆∞a gi·ªØ cu·ªôc tr√≤ chuy·ªán
                user1_response = keep_active_responses.get("user1")
                if user1_response != "yes":
                    users_to_notify.append(room.user1_id)
                    logger.info(f"User1 {room.user1_id} needs notification (response: {user1_response})")
                else:
                    logger.info(f"User1 {room.user1_id} already kept active, skipping notification")
                
                # Check user2 - ch·ªâ notify n·∫øu ch∆∞a gi·ªØ cu·ªôc tr√≤ chuy·ªán
                user2_response = keep_active_responses.get("user2")
                if user2_response != "yes":
                    users_to_notify.append(room.user2_id)
                    logger.info(f"User2 {room.user2_id} needs notification (response: {user2_response})")
                else:
                    logger.info(f"User2 {room.user2_id} already kept active, skipping notification")
                
                logger.info(f"Final users to notify for room {room_id}: {users_to_notify}")
                return users_to_notify
                
            finally:
                db.close()
        except Exception as e:
            logger.error(f"Error getting users to notify for room {room_id}: {e}")
            return []
    
    async def _get_user_key(self, room_id: int, user_id: int) -> Optional[str]:
        """L·∫•y user key (user1 ho·∫∑c user2)"""
        try:
            db = next(get_db())
            try:
                room = db.query(Room).filter(Room.id == room_id).first()
                if not room:
                    return None
                
                if room.user1_id == user_id:
                    return "user1"
                elif room.user2_id == user_id:
                    return "user2"
                else:
                    return None
                    
            finally:
                db.close()
        except Exception as e:
            logger.error(f"Error getting user key for room {room_id}, user {user_id}: {e}")
            return None
    
    async def _send_websocket_message(self, room_id: int, message: dict):
        """G·ª≠i WebSocket message"""
        try:
            await manager.broadcast_to_room(json.dumps(message), room_id)
        except Exception as e:
            logger.error(f"Error sending WebSocket message to room {room_id}: {e}")
    
    async def _send_personal_notification(self, room_id: int, user_id: int, timeout: int):
        """G·ª≠i notification c√° nh√¢n cho user"""
        try:
            notification_message = {
                "type": "notification_show",
                "room_id": room_id,
                "timeout": timeout,
                "message": "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi n√†y kh√¥ng?",
                "buttons": {
                    "yes": "‚úÖ C√≥ - T√¥i mu·ªën ti·∫øp t·ª•c",
                    "no": "‚ùå Kh√¥ng - K·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán"
                }
            }
            
            logger.info(f"üì§ Sending personal notification to user {user_id} for room {room_id}")
            
            # Th·ª≠ g·ª≠i personal message tr∆∞·ªõc
            try:
                await manager.send_personal_message(
                    json.dumps(notification_message), 
                    user_id
                )
                logger.info(f"‚úÖ Personal notification sent to user {user_id} for room {room_id}")
            except Exception as personal_error:
                logger.warning(f"‚ö†Ô∏è Personal message failed for user {user_id}: {personal_error}")
                # Fallback: g·ª≠i broadcast
                await manager.broadcast_to_room(json.dumps(notification_message), room_id)
                logger.info(f"‚úÖ Fallback broadcast sent for room {room_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Error sending notification to user {user_id}: {e}")
            # Final fallback: g·ª≠i broadcast
            try:
                notification_message = {
                    "type": "notification_show",
                    "room_id": room_id,
                    "timeout": timeout,
                    "message": "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi n√†y kh√¥ng?"
                }
                await manager.broadcast_to_room(json.dumps(notification_message), room_id)
                logger.info(f"‚úÖ Final fallback broadcast sent for room {room_id}")
            except Exception as e2:
                logger.error(f"‚ùå All notification methods failed: {e2}")
    
    def get_room_status(self, room_id: int) -> dict:
        """L·∫•y tr·∫°ng th√°i room"""
        if room_id not in self.rooms:
            return {"phase": "idle", "active": False}
        
        state = self.rooms[room_id]
        return {
            "phase": state.phase.value,
            "active": True,
            "countdown_remaining": state.countdown_remaining,
            "notification_remaining": state.notification_remaining,
            "user_responses": state.user_responses
        }

# Global instance
simple_countdown_service = SimpleCountdownService()
