#!/usr/bin/env python3
"""
Development Migration Runner
===========================

Script ƒë·ªÉ ch·∫°y database migration tr√™n m√¥i tr∆∞·ªùng development m·ªôt c√°ch an to√†n.
"""

import os
import sys
import sqlite3
import shutil
from pathlib import Path
from datetime import datetime
import traceback

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import modules
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def backup_database():
    """Backup database hi·ªán t·∫°i"""
    print("üîí T·∫°o backup database...")
    
    db_path = Path("mapmo.db")
    if not db_path.exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y database mapmo.db")
        return False
    
    # T·∫°o backup v·ªõi timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = Path(f"mapmo_backup_{timestamp}.db")
    
    try:
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ Database ƒë√£ ƒë∆∞·ª£c backup th√†nh c√¥ng: {backup_path}")
        return str(backup_path)
    except Exception as e:
        print(f"‚ùå L·ªói khi backup database: {e}")
        return False

def check_database_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi database"""
    print("\nüîç Ki·ªÉm tra k·∫øt n·ªëi database...")
    
    try:
        conn = sqlite3.connect("mapmo.db")
        cursor = conn.cursor()
        
        # Ki·ªÉm tra tables hi·ªán t·∫°i
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        existing_tables = [row[0] for row in cursor.fetchall()]
        
        print(f"‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng")
        print(f"‚úÖ Tables hi·ªán t·∫°i: {existing_tables}")
        
        conn.close()
        return True, existing_tables
        
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return False, []

def run_migration_step1():
    """Ch·∫°y migration step 1: T·∫°o c·∫•u tr√∫c m·ªõi"""
    print("\nüöÄ Ch·∫°y Migration Step 1: T·∫°o c·∫•u tr√∫c m·ªõi...")
    
    migration_file = "migrations/001_create_optimized_chat_system_fixed.sql"
    
    if not Path(migration_file).exists():
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file migration: {migration_file}")
        return False
    
    try:
        # ƒê·ªçc SQL script
        with open(migration_file, 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        # Ch·∫°y migration
        conn = sqlite3.connect("mapmo.db")
        cursor = conn.cursor()
        
        # Ch·∫°y t·ª´ng c√¢u l·ªánh SQL
        sql_commands = [cmd.strip() for cmd in sql_script.split(';') if cmd.strip()]
        
        for i, command in enumerate(sql_commands):
            if command and not command.startswith('--'):
                try:
                    cursor.execute(command)
                    print(f"‚úÖ Th·ª±c thi command {i+1}: {command[:50]}...")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Command {i+1} c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i: {e}")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Migration Step 1 ho√†n th√†nh!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong Migration Step 1: {e}")
        traceback.print_exc()
        return False

def run_migration_step2():
    """Ch·∫°y migration step 2: Migrate d·ªØ li·ªáu c≈© (t√πy ch·ªçn)"""
    print("\nüöÄ Ch·∫°y Migration Step 2: Migrate d·ªØ li·ªáu c≈©...")
    
    migration_file = "migrations/002_migrate_existing_data_20250822_233913.sql"
    
    if not Path(migration_file).exists():
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file migration: {migration_file}")
        return False
    
    try:
        # ƒê·ªçc SQL script
        with open(migration_file, 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        # Ch·∫°y migration
        conn = sqlite3.connect("mapmo.db")
        cursor = conn.cursor()
        
        # Ch·∫°y t·ª´ng c√¢u l·ªánh SQL
        sql_commands = [cmd.strip() for cmd in sql_script.split(';') if cmd.strip()]
        
        for i, command in enumerate(sql_commands):
            if command and not command.startswith('--'):
                try:
                    cursor.execute(command)
                    print(f"‚úÖ Th·ª±c thi command {i+1}: {command[:50]}...")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Command {i+1} c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i: {e}")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Migration Step 2 ho√†n th√†nh!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong Migration Step 2: {e}")
        traceback.print_exc()
        return False

def verify_migration():
    """Verify migration ƒë√£ th√†nh c√¥ng"""
    print("\nüîç Verify migration...")
    
    try:
        conn = sqlite3.connect("mapmo.db")
        cursor = conn.cursor()
        
        # Ki·ªÉm tra tables m·ªõi
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        all_tables = [row[0] for row in cursor.fetchall()]
        
        # Tables c·∫ßn c√≥ sau migration
        required_tables = [
            'chat_rooms', 'chat_messages', 'room_participants',
            'message_reactions', 'chat_sessions', 'chat_events'
        ]
        
        missing_tables = [table for table in required_tables if table not in all_tables]
        
        if missing_tables:
            print(f"‚ùå Thi·∫øu tables: {missing_tables}")
            return False
        else:
            print("‚úÖ T·∫•t c·∫£ tables m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o")
        
        # Ki·ªÉm tra indexes
        cursor.execute("SELECT name FROM sqlite_master WHERE type='index'")
        indexes = [row[0] for row in cursor.fetchall()]
        
        print(f"‚úÖ T·ªïng s·ªë indexes: {len(indexes)}")
        
        # Ki·ªÉm tra triggers
        cursor.execute("SELECT name FROM sqlite_master WHERE type='trigger'")
        triggers = [row[0] for row in cursor.fetchall()]
        
        print(f"‚úÖ T·ªïng s·ªë triggers: {len(triggers)}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi verify migration: {e}")
        return False

def test_system_after_migration():
    """Test h·ªá th·ªëng sau migration"""
    print("\nüß™ Test h·ªá th·ªëng sau migration...")
    
    try:
        # Test import c√°c modules m·ªõi
        from app.models.chat_models import ChatRoom, ChatMessage, RoomParticipant
        print("‚úÖ Import models m·ªõi th√†nh c√¥ng")
        
        from app.schemas.chat_schemas import ChatRoomCreate, ChatMessageCreate
        print("‚úÖ Import schemas m·ªõi th√†nh c√¥ng")
        
        from app.websocket.connection_manager import ConnectionManager
        print("‚úÖ Import connection manager m·ªõi th√†nh c√¥ng")
        
        from app.services.chat_service import ChatService
        print("‚úÖ Import chat service m·ªõi th√†nh c√¥ng")
        
        # Test t·∫°o objects
        room = ChatRoomCreate(user2_id=1, search_type="chat")
        print("‚úÖ T·∫°o ChatRoomCreate th√†nh c√¥ng")
        
        message = ChatMessageCreate(content="Test message", room_id=1)
        print("‚úÖ T·∫°o ChatMessageCreate th√†nh c√¥ng")
        
        print("‚úÖ T·∫•t c·∫£ tests ƒë·ªÅu PASS!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong test: {e}")
        traceback.print_exc()
        return False

def rollback_migration():
    """Rollback migration n·∫øu c·∫ßn"""
    print("\nüîÑ Rollback migration...")
    
    rollback_file = "migrations/003_rollback_optimized_system_20250822_233913.sql"
    
    if not Path(rollback_file).exists():
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file rollback: {rollback_file}")
        return False
    
    try:
        # ƒê·ªçc SQL script
        with open(rollback_file, 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        # Ch·∫°y rollback
        conn = sqlite3.connect("mapmo.db")
        cursor = conn.cursor()
        
        # Ch·∫°y t·ª´ng c√¢u l·ªánh SQL
        sql_commands = [cmd.strip() for cmd in sql_script.split(';') if cmd.strip()]
        
        for i, command in enumerate(sql_commands):
            if command and not command.startswith('--'):
                try:
                    cursor.execute(command)
                    print(f"‚úÖ Th·ª±c thi rollback command {i+1}: {command[:50]}...")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Rollback command {i+1} c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c th·ª±c thi: {e}")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Rollback ho√†n th√†nh!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong rollback: {e}")
        traceback.print_exc()
        return False

def main():
    """Main function"""
    print("üöÄ Development Migration Runner")
    print("="*50)
    print("‚ö†Ô∏è  CH√ö √ù: Ch·ªâ ch·∫°y tr√™n m√¥i tr∆∞·ªùng development!")
    print("‚ö†Ô∏è  Backup database s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông")
    print("="*50)
    
    try:
        # 1. Backup database
        backup_path = backup_database()
        if not backup_path:
            print("‚ùå Kh√¥ng th·ªÉ backup database. D·ª´ng migration.")
            return False
        
        # 2. Ki·ªÉm tra k·∫øt n·ªëi database
        db_ok, existing_tables = check_database_connection()
        if not db_ok:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database. D·ª´ng migration.")
            return False
        
        # 3. Ch·∫°y Migration Step 1
        if not run_migration_step1():
            print("‚ùå Migration Step 1 th·∫•t b·∫°i. D·ª´ng migration.")
            return False
        
        # 4. Verify migration
        if not verify_migration():
            print("‚ùå Verification th·∫•t b·∫°i. D·ª´ng migration.")
            return False
        
        # 5. Ch·∫°y Migration Step 2 (t√πy ch·ªçn)
        print("\n‚ùì B·∫°n c√≥ mu·ªën migrate d·ªØ li·ªáu c≈© kh√¥ng? (y/n): ", end="")
        user_input = input().lower().strip()
        
        if user_input in ['y', 'yes', 'c√≥']:
            if not run_migration_step2():
                print("‚ö†Ô∏è  Migration Step 2 th·∫•t b·∫°i, nh∆∞ng h·ªá th·ªëng v·∫´n ho·∫°t ƒë·ªông")
        
        # 6. Test h·ªá th·ªëng
        if not test_system_after_migration():
            print("‚ùå Test h·ªá th·ªëng th·∫•t b·∫°i.")
            print("üîÑ B·∫Øt ƒë·∫ßu rollback...")
            rollback_migration()
            return False
        
        print("\nüéâ MIGRATION TH√ÄNH C√îNG!")
        print("‚úÖ H·ªá th·ªëng chat m·ªõi ƒë√£ s·∫µn s√†ng")
        print(f"‚úÖ Database backup: {backup_path}")
        print("\nüìã B∆∞·ªõc ti·∫øp theo:")
        print("1. Test ·ª©ng d·ª•ng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
        print("2. Ki·ªÉm tra c√°c t√≠nh nƒÉng m·ªõi")
        print("3. N·∫øu c√≥ v·∫•n ƒë·ªÅ, s·ª≠ d·ª•ng rollback script")
        
        return True
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Migration b·ªã gi√°n ƒëo·∫°n b·ªüi user")
        print("üîÑ B·∫Øt ƒë·∫ßu rollback...")
        rollback_migration()
        return False
        
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        print("üîÑ B·∫Øt ƒë·∫ßu rollback...")
        rollback_migration()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
