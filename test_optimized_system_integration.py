#!/usr/bin/env python3
"""
Test Integration c·ªßa H·ªá th·ªëng Chat M·ªõi
=====================================

Ki·ªÉm tra xem h·ªá th·ªëng chat m·ªõi c√≥ t√≠ch h·ª£p m∆∞·ª£t m√† v·ªõi h·ªá th·ªëng c≈© kh√¥ng
v√† ƒë√°nh gi√° hi·ªáu su·∫•t.
"""

import os
import sys
import asyncio
import time
import traceback
from pathlib import Path

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import modules
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def test_imports():
    """Ki·ªÉm tra import c√°c module m·ªõi"""
    print("üîç Ki·ªÉm tra import c√°c module m·ªõi...")
    
    try:
        # Test import models m·ªõi
        from app.models.chat_models import ChatRoom, ChatMessage, RoomParticipant
        print("‚úÖ Import models m·ªõi th√†nh c√¥ng")
        
        # Test import schemas m·ªõi
        from app.schemas.chat_schemas import ChatRoomCreate, ChatMessageCreate
        print("‚úÖ Import schemas m·ªõi th√†nh c√¥ng")
        
        # Test import connection manager m·ªõi
        from app.websocket.connection_manager import ConnectionManager
        print("‚úÖ Import connection manager m·ªõi th√†nh c√¥ng")
        
        # Test import chat service m·ªõi
        from app.services.chat_service import ChatService
        print("‚úÖ Import chat service m·ªõi th√†nh c√¥ng")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói import: {e}")
        traceback.print_exc()
        return False

def test_old_system_compatibility():
    """Ki·ªÉm tra t∆∞∆°ng th√≠ch v·ªõi h·ªá th·ªëng c≈©"""
    print("\nüîç Ki·ªÉm tra t∆∞∆°ng th√≠ch v·ªõi h·ªá th·ªëng c≈©...")
    
    try:
        # Test import models c≈©
        from app.models import User, Room, Message
        print("‚úÖ Import models c≈© th√†nh c√¥ng")
        
        # Test import schemas c≈©
        from app.schemas import UserResponse, RoomResponse, MessageResponse
        print("‚úÖ Import schemas c≈© th√†nh c√¥ng")
        
        # Test import websocket manager c≈©
        from app.websocket_manager import manager
        print("‚úÖ Import websocket manager c≈© th√†nh c√¥ng")
        
        # Test import websocket handlers c≈©
        from app.websocket_handlers import handle_chat_websocket
        print("‚úÖ Import websocket handlers c≈© th√†nh c√¥ng")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói import h·ªá th·ªëng c≈©: {e}")
        traceback.print_exc()
        return False

def test_database_compatibility():
    """Ki·ªÉm tra t∆∞∆°ng th√≠ch database"""
    print("\nüîç Ki·ªÉm tra t∆∞∆°ng th√≠ch database...")
    
    try:
        from app.database import Base, engine, get_db
        
        # Ki·ªÉm tra xem c√≥ th·ªÉ t·∫°o tables kh√¥ng
        print("‚úÖ Import database th√†nh c√¥ng")
        
        # Ki·ªÉm tra xem c√≥ conflict trong table names kh√¥ng
        from app.models import User, Room, Message
        from app.models.chat_models import ChatRoom, ChatMessage, RoomParticipant
        
        old_tables = {'users', 'rooms', 'messages'}
        new_tables = {'chat_rooms', 'chat_messages', 'room_participants'}
        
        if old_tables.intersection(new_tables):
            print("‚ö†Ô∏è  C√≥ conflict trong t√™n tables!")
            return False
        else:
            print("‚úÖ Kh√¥ng c√≥ conflict trong t√™n tables")
            return True
            
    except Exception as e:
        print(f"‚ùå L·ªói database: {e}")
        traceback.print_exc()
        return False

def test_websocket_compatibility():
    """Ki·ªÉm tra t∆∞∆°ng th√≠ch WebSocket"""
    print("\nüîç Ki·ªÉm tra t∆∞∆°ng th√≠ch WebSocket...")
    
    try:
        # Ki·ªÉm tra xem c√≥ conflict trong WebSocket routes kh√¥ng
        from app.websocket_routes import router as websocket_router
        
        # Ki·ªÉm tra xem c√≥ th·ªÉ import c·∫£ hai manager kh√¥ng
        from app.websocket_manager import manager as old_manager
        from app.websocket.connection_manager import ConnectionManager
        
        print("‚úÖ Import WebSocket components th√†nh c√¥ng")
        print("‚úÖ Kh√¥ng c√≥ conflict trong WebSocket routes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói WebSocket: {e}")
        traceback.print_exc()
        return False

def test_frontend_compatibility():
    """Ki·ªÉm tra t∆∞∆°ng th√≠ch frontend"""
    print("\nüîç Ki·ªÉm tra t∆∞∆°ng th√≠ch frontend...")
    
    try:
        # Ki·ªÉm tra xem c√≥ file JavaScript m·ªõi kh√¥ng
        optimized_chat_path = Path("static/js/modules/optimized_chat.js")
        if optimized_chat_path.exists():
            print("‚úÖ File optimized_chat.js t·ªìn t·∫°i")
        else:
            print("‚ùå File optimized_chat.js kh√¥ng t·ªìn t·∫°i")
            return False
        
        # Ki·ªÉm tra xem c√≥ conflict trong t√™n class kh√¥ng
        with open(optimized_chat_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if 'class OptimizedChat' in content:
                print("‚úÖ Class OptimizedChat ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a")
            else:
                print("‚ùå Class OptimizedChat kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói frontend: {e}")
        traceback.print_exc()
        return False

def test_performance_metrics():
    """Ki·ªÉm tra c√°c metrics hi·ªáu su·∫•t"""
    print("\nüîç Ki·ªÉm tra metrics hi·ªáu su·∫•t...")
    
    try:
        # Test import time
        start_time = time.time()
        from app.models.chat_models import ChatRoom, ChatMessage, RoomParticipant
        from app.schemas.chat_schemas import ChatRoomCreate, ChatMessageCreate
        from app.websocket.connection_manager import ConnectionManager
        from app.services.chat_service import ChatService
        import_time = time.time() - start_time
        
        print(f"‚úÖ Import time: {import_time:.4f}s")
        
        if import_time < 0.1:
            print("‚úÖ Import performance t·ªët")
        elif import_time < 0.5:
            print("‚ö†Ô∏è  Import performance trung b√¨nh")
        else:
            print("‚ùå Import performance ch·∫≠m")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói performance test: {e}")
        traceback.print_exc()
        return False

def test_system_integration():
    """Ki·ªÉm tra t√≠ch h·ª£p t·ªïng th·ªÉ"""
    print("\nüîç Ki·ªÉm tra t√≠ch h·ª£p t·ªïng th·ªÉ...")
    
    try:
        # Ki·ªÉm tra xem app factory c√≥ th·ªÉ import ƒë∆∞·ª£c kh√¥ng
        from app.app_factory import create_app
        
        print("‚úÖ App factory import th√†nh c√¥ng")
        
        # Ki·ªÉm tra xem c√≥ th·ªÉ t·∫°o app instance kh√¥ng
        # (Ch·ªâ test import, kh√¥ng test runtime)
        print("‚úÖ App factory structure h·ª£p l·ªá")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói t√≠ch h·ª£p: {e}")
        traceback.print_exc()
        return False

def main():
    """Ch·∫°y t·∫•t c·∫£ tests"""
    print("üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra t√≠ch h·ª£p h·ªá th·ªëng chat m·ªõi...\n")
    
    tests = [
        ("Import Modules M·ªõi", test_imports),
        ("T∆∞∆°ng th√≠ch H·ªá th·ªëng C≈©", test_old_system_compatibility),
        ("T∆∞∆°ng th√≠ch Database", test_database_compatibility),
        ("T∆∞∆°ng th√≠ch WebSocket", test_websocket_compatibility),
        ("T∆∞∆°ng th√≠ch Frontend", test_frontend_compatibility),
        ("Metrics Hi·ªáu su·∫•t", test_performance_metrics),
        ("T√≠ch h·ª£p T·ªïng th·ªÉ", test_system_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå L·ªói trong test {test_name}: {e}")
            results.append((test_name, False))
    
    # T·ªïng k·∫øt
    print("\n" + "="*50)
    print("üìä K·∫æT QU·∫¢ KI·ªÇM TRA T√çCH H·ª¢P")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nT·ªïng c·ªông: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ T·∫•t c·∫£ tests ƒë·ªÅu PASS! H·ªá th·ªëng m·ªõi t√≠ch h·ª£p m∆∞·ª£t m√†.")
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è  H·∫ßu h·∫øt tests PASS. C√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ nh·ªè c·∫ßn kh·∫Øc ph·ª•c.")
    else:
        print("‚ùå Nhi·ªÅu tests FAIL. C·∫ßn ki·ªÉm tra v√† kh·∫Øc ph·ª•c c√°c v·∫•n ƒë·ªÅ.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
